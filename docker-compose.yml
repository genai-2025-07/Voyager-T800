# -----------------------------------------------------------------------------
# Voyager-T800 Docker Compose Configuration
# -----------------------------------------------------------------------------
# SERVICE OVERVIEW:
# - api-dev: Development API with hot reload, source mounting, and debugging tools
# - api: Production API optimized for performance and security
# - streamlit-dev: Development Streamlit frontend with hot reload
# - streamlit: Production Streamlit frontend
# - dynamodb-local: Local DynamoDB instance for development and testing
# - redis: Redis cache with authentication and data persistence
# - weaviate-db: Vector database for AI-powered travel recommendations
#
# USAGE INSTRUCTIONS:
#
# DEVELOPMENT ENVIRONMENT:
#   Prerequisites:
#     - No AWS credentials needed (uses local DynamoDB)
#     - Ensure .env file exists with development settings
#   
#   Startup:
#     docker compose --profile dev up --build
#   
#   Default access:
#     - API: http://localhost:8000
#     - Streamlit: http://localhost:8501
#     - DynamoDB: http://localhost:8003 (local)
#     - Redis: localhost:6379
#     - Weaviate: http://localhost:8090
#
# PRODUCTION ENVIRONMENT:
#   Prerequisites:
#     - Export AWS credentials: AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY, AWS_REGION
#     - Ensure .prod.env file exists with production settings
#   
#   Startup:
#     docker compose --profile prod --env-file .prod.env up --build
#   
#   Default access:
#     - API: http://localhost:8001
#     - Streamlit: http://localhost:8502
#     - DynamoDB: AWS DynamoDB (cloud)
#     - Redis: localhost:6379
#     - Weaviate: http://localhost:8090
#
# ENVIRONMENT VARIABLES:
# 
# SHELL EXPORT (Required for PRODUCTION only):
#   AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY, AWS_REGION
#   These must be exported in your shell before running docker compose --profile prod
#
# .env/.prod.env FILES:
#   - USE_LOCAL_DYNAMODB (true for dev, false for prod)
#   - DYNAMODB_ENDPOINT_URL (for dev: http://dynamodb-local:8003)
#   - DYNAMO_HOST_PORT, DYNAMO_CONTAINER_PORT
#   - REDIS_HOST_PORT, REDIS_CONTAINER_PORT  
#   - WEAVIATE_DB_HOST_PORT, WEAVIATE_DB_CONTAINER_PORT
#   - HOST_PORT_DEV, CONTAINER_PORT_DEV
#   - HOST_PORT_PROD, CONTAINER_PORT_PROD
#   - STREAMLIT_HOST_PORT_DEV, STREAMLIT_HOST_PORT_PROD
#   - GRPS_API_PORT, PERSISTENCE_DATA_PATH
#
# For detailed configuration and troubleshooting, see docs/docker-setup.md
# -----------------------------------------------------------------------------
version: "3.9"
services:
  # ============================================================================
  # PRODUCTION CONFIGURATION
  # ============================================================================
  api:
    build:
      context: .
      dockerfile: Dockerfile
      target: prod
    container_name: api-prod
    ports:
      - "${HOST_PORT_PROD:-8001}:${CONTAINER_PORT_PROD:-8001}"
    env_file:
      - .prod.env
    environment:
      # Production uses AWS DynamoDB - requires AWS credentials
      - USE_LOCAL_DYNAMODB=false
      - AWS_ACCESS_KEY_ID
      - AWS_SECRET_ACCESS_KEY
      - AWS_REGION
    depends_on:
      redis:
        condition: service_healthy
      weaviate-db:
        condition: service_healthy
    networks:
      - app-network
    profiles: ["prod"]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${CONTAINER_PORT_PROD}/docs"]
      interval: 15s
      timeout: 5s
      retries: 5

  streamlit:
    build:
      context: .
      dockerfile: Dockerfile.streamlit
    container_name: streamlit-prod
    ports:
      - "${STREAMLIT_HOST_PORT_PROD:-8502}:8501"
    env_file:
      - .prod.env
    environment:
      - API_BASE_URL=http://api:8001
      - STREAMLIT_ENV=prod
    depends_on:
      api:
        condition: service_healthy
    networks:
      - app-network
    profiles: ["prod"]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8501/_stcore/health"]
      interval: 30s
      timeout: 10s
      retries: 3
  
  # ============================================================================
  # DEVELOPMENT CONFIGURATION
  # ============================================================================
  api-dev:
    build:
      context: .
      dockerfile: Dockerfile
      target: dev
    container_name: api-dev
    env_file:
      - .env
    ports:
      - "${HOST_PORT_DEV:-8000}:${CONTAINER_PORT_DEV:-8000}"
    volumes:
      - ./app:/app/app

    environment:
      # Development uses local DynamoDB - no AWS credentials needed
      - USE_LOCAL_DYNAMODB=true
      - DYNAMODB_ENDPOINT_URL=http://dynamodb-local:8003
      - AWS_REGION=us-east-2
    depends_on:
      dynamodb-local:
        condition: service_healthy
      redis:
        condition: service_healthy
      weaviate-db:
        condition: service_healthy
    networks:
      - app-network
    profiles: ["dev"]
    
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${CONTAINER_PORT_DEV}/docs"]
      interval: 15s
      timeout: 5s
      retries: 5

  streamlit-dev:
    build:
      context: .
      dockerfile: Dockerfile.streamlit
    container_name: streamlit-dev
    ports:
      - "${STREAMLIT_HOST_PORT_DEV:-8501}:8501"
    env_file:
      - .env
    environment:
      - API_BASE_URL=http://api-dev:8000
      - STREAMLIT_ENV=dev
    volumes:
      # Hot reload for development
      - ./app/frontend:/app/frontend
    depends_on:
      api-dev:
        condition: service_healthy
    networks:
      - app-network
    profiles: ["dev"]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8501/_stcore/health"]
      interval: 30s
      timeout: 10s
      retries: 3
  
  # ============================================================================
  # INFRASTRUCTURE SERVICES
  # ============================================================================
  dynamodb-local:
    image: amazon/dynamodb-local:latest
    container_name: dynamodb-local
    restart: unless-stopped
    command: -jar DynamoDBLocal.jar -sharedDb -dbPath ./data -port ${DYNAMO_CONTAINER_PORT}
    working_dir: /home/dynamodblocal       
    volumes:
      - ./dynamodb:/home/dynamodblocal/data  
    networks:
      - app-network
    ports:
      - "${DYNAMO_HOST_PORT}:${DYNAMO_CONTAINER_PORT}" 
    environment:
      # AWS credentials are passed ONLY from the host shell environment variables
      - AWS_ACCESS_KEY_ID
      - AWS_SECRET_ACCESS_KEY
      - AWS_REGION
    healthcheck:
      test:
        [
          "CMD-SHELL",
          'if [ "$(curl -s -o /dev/null -I -w ''%{http_code}'' http://localhost:${DYNAMO_CONTAINER_PORT})" == "400" ]; then exit 0; else exit 1; fi',
        ]
      interval: 5s
      timeout: 5s
      retries: 10

  redis:
    image: redis:7
    container_name: redis-cache
    restart: unless-stopped
    secrets:
      - redis_password
    environment:
      - REDIS_PASSWORD_FILE=/run/secrets/redis_password
    command: >
      sh -c "redis-server --requirepass $(cat /run/secrets/redis_password)"
    volumes:
      - redis_data:/data
    networks:
      - app-network
    ports:
      - "${REDIS_HOST_PORT}:${REDIS_CONTAINER_PORT}"
    healthcheck:
      test: ["CMD-SHELL", "redis-cli -a $(cat /run/secrets/redis_password) ping | grep PONG"]
      interval: 10s
      timeout: 5s
      retries: 5

  weaviate-db:
    image: semitechnologies/weaviate:1.32.3
    container_name: weaviate
    restart: unless-stopped
    env_file:
      - .env
    volumes:
      - weaviate_data:${PERSISTENCE_DATA_PATH}
    ports:
      - "${WEAVIATE_DB_HOST_PORT}:${WEAVIATE_DB_CONTAINER_PORT}"
      - "${GRPS_API_PORT}:${GRPS_API_PORT}" # gRPC API
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "wget -qO- http://localhost:${WEAVIATE_DB_CONTAINER_PORT}/v1/.well-known/ready"]
      interval: 15s
      timeout: 5s
      retries: 5
    command:
      - --host
      - ${HOST}
      - --port
      - ${WEAVIATE_DB_CONTAINER_PORT}
      - --scheme
      - http

volumes:
  dynamodb_data:
  weaviate_data:
  redis_data:

networks:
  app-network:
    driver: bridge

secrets:
  redis_password:
    file: ./secrets/redis_password.txt
