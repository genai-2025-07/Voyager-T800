[project]
name = "voyager-t800"
version = "0.1.0"
description = ""
authors = []
readme = "README.md"
requires-python = ">=3.11,<4.0"
dependencies = [
    "langchain (>=0.3.27,<0.4.0)",
    "fastapi (>=0.116.1,<0.117.0)",
    "mwparserfromhell (>=0.7.2,<0.8.0)",
    "requests (>=2.32.4,<3.0.0)",
    "pytz (>=2024.1,<2025.0)",
    "pandas (>=2.3.1,<3.0.0)",
    "aiohttp (>=3.9.0,<4.0.0)",
    "tqdm (>=4.66.0,<5.0.0)",
    "googlemaps (>=4.10.0,<5.0.0)",
    "pyyaml (>=6.0.2,<7.0.0)",
    "uvicorn (>=0.35.0,<0.36.0)",
    "gunicorn (>=21.1.0,<22.1.0)",
    "python-json-logger (>=3.3.0,<4.0.0)",
    "python-dotenv (>=1.1.1,<2.0.0)",
    "openai (>=1.99.9,<2.0.0)",
    "pydantic (>=2.11.7,<3.0.0)",
    "pydantic-settings (>=2.0.0,<3.0.0)",
    "langchain-groq (>=0.3.7,<0.4.0)",
    "streamlit (>=1.49.1,<2.0.0)",
    "weaviate-client (>=4.16.9,<5.0.0)",
    "langchain-community (>=0.3.27,<0.4.0)",
    "langchain-openai (>=0.3.30,<0.4.0)",
    "python-jose[cryptography] (>=3.5.0,<4.0.0)",
    "pyjwt (>=2.9.0,<3.0.0)",
    "email-validator (>=2.3.0,<3.0.0)",
]

[tool.poetry]
name = "voyager-t800"
version = "0.1.0"
description = ""
authors = []
packages = [
    { include = "app" }
]

[tool.poetry.group.dev.dependencies]
ruff = "^0.12.7"
pytest = "^8.4.1"
pre-commit = "^4.2.0"
pytest-cov = "^6.2.1"

[tool.poetry.group.prod.dependencies]
boto3 = "^1.40.1"

[build-system]
requires = ["poetry-core>=2.0.0,<3.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-v",
    "--tb=short",
    "--strict-markers",
    "--disable-warnings"
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "regex: marks tests as regex pattern tests",
    "edge_case: marks tests as edge case tests"
]

[tool.coverage.run]
source = ["app"]
omit = [
    "*/tests/*",
    "*/test_*.py"
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
